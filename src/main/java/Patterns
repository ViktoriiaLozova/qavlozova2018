1.	Вказати, за допомогою якого шаблону проектування можна реалізувати класи, необхідні для відтворення ситуації
у наведеній нижче задачі:

«На виставці собак всі учасники мають такі спільні характеристики як зріст, вага, вік, порода, ім’я хазяїна. Однак,
деякі породи собак можуть мати додаткові обов’язкові характеристики: наприклад, куповані хвіст та вушка, додаткові
щеплення тощо. Крім того, відрізняються також і функції, природні для собак: одні є мисливськими, інші – бійцівськими.
Отже, крім загальних команд, вони мають вміти виконувати і ті, що притаманні лише їх породі.»

Відповідь: за допомогою патерну Абстрактна фабрика. Створити інтерфейс Собака з основними характеристиками;
створити класи Мисливські та Бійцівські, які будуть наслідуватися від інтерфейсу Собака з такими ж характеристиками;
створити інтерфейс Абстрактна фабрика з методами створення собак з різними додатковими характеристиками;
створити класи(фабрики) створення мисливських та бійцівських собак, які будуть імплементувати інтерфейс Абстрактна фабрика


2.	 Вказати, за допомогою якого шаблону проектування можна реалізувати класи, необхідні для відтворення ситуації
у наведеній нижче задачі:

«Програмний текстовий чат версії 1.0 підтримує виведення тексту повідомлення у віконці діалогу з іншим користувачем
у звичайному вигляді (шрифт 14 кегль, Times New Roman, чорний). На основі вже існуючого движка чату потрібно реалізувати
виведення тексту заданим кольором, типом шрифта та розміром. Також на початку повідомлення додати час його надходження.»

Відповідь: за допомогою патерну Декоратор. Створити інтерфейс Повідомлення з методом getText(); створити класи декораторів,
які реалізують інтерфейс Повідомлення та додають до початкового тексту додаткові можливості: колір, розмір, шрифт.
При отриманні повідомлення обернути його за допомогою створених декораторів.


3.	Вказати, за допомогою якого шаблону проектування можна реалізувати класи, необхідні для відтворення ситуації у
 наведеній нижче задачі:

«Розробити програмний механізм, який буде перевіряти текстові повідомлення на перевищення припустимої кількості
 символів у них перед відправленням до мережі.»

Відповідь: за допомогою патерну Ланцюжок обов’язків з одним класом, який перевіряє довжину тексту. При додаткових
перевірках до ланцюжка можна додати інші класи.


4.	Вказати, за допомогою якого шаблону проектування можна реалізувати класи, необхідні для відтворення ситуації у
наведеній нижче задачі:

«В аптеці продаються ліки різних виробників. Всі вони мають назву, групу ліків, до якої вони належать (антибіотики,
протизапальні, шлункові тощо), ціну, термін зберігання. Однак, імпортні ліки повинні мати додатковий сертифікат про
проходження препаратом лабораторного контролю в Україні. Крім того, у випадку замовлення покупцем імпортного препарату,
фармацевт (якщо звернеться до бази даних ліків в аптеці) повинен побачити не тільки інформацію про наявність ліків в
аптеці та їх ціну, а й дані про вітчизняні аналоги препарату, які як правило, є дешевшими. Розробити структуру класів,
які можна використовувати для комп’ютерної обробки даних про ліки (як вітчизняні, так й імпортні) в аптеці.»

Відповідь: за допомогою патерну Стратегія. Необхідно створити інтерфейс Абстрактна стратегія з двома методами: перевірка
сертифікації та метод, що повертає дані про вітчизняні аналоги. Створити два класи Українська та Зарубіжна стратегія,
які будуть імплементувати інтефейс Абстракта стратегія та реалізовувати методи. Створити абстрактний клас Ліки з основними
полями та методом, який повертає абстрактну стратегію(getStrategy()). Створити два класи наслідники Українські та Зарубіжні
ліки, в яких перевизначається метод повернення стратегії.


5.	За допомогою якого патерну можна вирішити представлену проблему?
Уявімо, що в проектованій системі клієнти мають можливість зробити замовлення на певний продукт.
Вибирається продукт, заповнюється форма замовлення і далі замовлення зберігається. При цьому до того моменту як
замовлення візьмуть на виконання, клієнт може редагувати деякі його параметри.  Для більшої зручності потрібна можливість,
щоб клієнт міг «відкатувати» свої зроблені зміни в замовленні до попереднього стану.

Відповідь: за допомогою патерну Стан. Створити інтерфейс Стан з методами Перехід на наступний стан, Редагування, Реверт.
Створити 4 класи станів, які імплементують інтерфейс Стан: Створення, Редагування, Збереження, Опрацювання документу.
В класі Створення реалізувати метод переходу на наступний стан (методи редагування та реверту будуть пусті).
В класі Редагування реалізувати методи редагування, переходу на наступний стан та реверту. На етапі Збереження реалізувати
методи реверту та переходу на наступний стан. На етапі Опрацювання методи будуть пусті.


6.	За допомогою якого патерну можна вирішити представлену проблему?
Дуже часто в процесі функціонування і взаємодії об'єктів системи потрібно сповіщати інших учасників про завершення
якої-небудь операції.
Звичайно ж, можна в кожен такий клас додавати звернення до всіх зацікавлених об'єктів, але цей спосіб досить згубний:
мало того, що таким чином ми дублюємо як попало нові зв'язки між об'єктами (система стає все менш і менш гнучкою) -
це ще і в рази ускладнить подальшу модифікацію будь-яких учасників, тому необхідно буде перекомпілювати цей код звернення
до всіх зацікавлених суб'єктів.
У цьому випадку дуже підійшло б мати таку структуру, в якій кожен учасник, якщо він зацікавлений в якихось подіях системи,
міг би самостійно «підписатися» на ці зміниться незалежно від інших зацікавлених учасникам - і, таким чином, отримуючи
повідомлення про ці події - виконувати необхідні дії у відповідь.

Відповідь: за допомогою патерну Спостерігач, який створює механізм підписки, що дозволяє одним об'єктам стежити і
реагувати на події, що відбуваються в інших об'єктах.


7.	За допомогою якого патерну можна вирішити представлену проблему
Припустимо, що у вашій грі потрібно будувати палац правителя. Палац складається з трону, залу бенкетів, спальні, тюрми і
 молитовні. Ваша гра повинна створити палац для кожної раси.

Відповідь: за допомогою патерну Будівельник, який надає можливість додавати змінені кімнати (специфічні для кожної раси)


8.	За допомогою якого патерну можна вирішити представлену проблему ?
Розглянемо реалізацію конвеєра, який створює автомобілі. Як відомо по ньому рухається спочатку порожній кузов (каркас),
і поступово на кожному новому етапі до цього каркаса додаються нові частини. У загальному випадку на конвеєрі, в принципі,
все-одно що збирати - вантажівки, легкові та інш.; головне, щоб відповідні робочі бригади виконували свою роботу послідовно
на кожному етапі. Тому послідовність дій, виконуваних конвеєром може бути дуже просто зведена до певного завжди однакового
 сценарію: збірка, додавання дверей в авто, коліс, двигуна і фарбування.

Відповідь: за допомогою патерну Ланцюжок обов’язків, тому що сценарій збірки завжди однаковий. На кожному етапі
виконується невеликий шматок роботи


9.	За допомогою якого патерну можна вирішити представлену проблему ?
Розглянемо інтернет-сайт. Його структура зазвичай являє собою ієрархію різних інформаційних сторінок, згрупованих за
розділами цього інтернет-сайту, тобто існують як просто сторінки з інформацією, так і  розділи, що виводять який-небудь
опис, а також список вкладених розділів і сторінок.
На такій спеціальній сторінці як «карта сайту» необхідно вивести всю ієрархію цих сторінок у вигляді єдиного дерева.
Було б дуже корисно мати єдиний алгоритм виведення, що працює уніфіковано як з окремими документами, так і розділами,
а не визначати за якимись ознаками яким самим є поточний елемент і застосовувати спеціальну обробку для кожного випадку.

Відповідь: за допомогою патерну Компоновник, тому що сайт має ієрархічну структуру. Компоновник дозволить згрупувати
безліч об'єктів в деревоподібну структуру за допомогою приведення їх всіх до одного інтерфейсу, що дозволить вивести
назву вузла та всіх його дітей.


10.	За допомогою якого патерну можна вирішити представлену проблему ?
У багатокористувальницькій системі визначено сутність оператор (Operator), на яку покладаються певні обов'язки.
Крім цього в системі вже був клас користувач (User), який хоча і містить у своїй внутрішній структурі дані, необхідні
для функціонування в ролі оператора - але володіє абсолютно іншим інтерфейсом.
Варіант - імплементувати інтерфейс Operator в User, додавши бракуючі методи - не дуже підходить. Зайве обтяжувати клас
User, який виконує свої певні функції - новими методами, в кожному випадку, коли потрібно представити його в якості іншої
сутності - не зовсім ефективно та правильно.

Відповідь: за допомогою патерну Адаптер, який дозволяє об'єктам з несумісними інтерфейсами працювати разом. Створити клас,
який імплементує інтерфейс Оператор та містить поле Користувач. При виклику методів цього класу, перенапраляти виклики
в методи Користувача(якщо такі методи існують в класі Користувач).
